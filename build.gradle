configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'

    group = "net.davidbuccola.${rootProject.name}"

    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
}

configure(rootProject) {
    ext.gitHash = 'git log -1 --format=%H'.execute().text.trim()

    idea {
        project {
            ipr {
                withXml { provider ->
                    provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'

                    def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
                    gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])

                    def javacSettings = node.appendNode('component', [name: 'JavacSettings'])
                    javacSettings.appendNode('option', [name: 'MAXIMUM_HEAP_SIZE', value: "256"])
                }
            }
        }
    }
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'osgi'

    ext.gitHash = rootProject.gitHash  // So we don't execute git command multiple times

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("${project.buildDir}/classes/main")
            testOutputDir = file("${project.buildDir}/classes/test")
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava.srcDirs
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    tasks.withType(Compile) {
        options.debug = true
        options.encoding = 'UTF-8'
        options.compilerArgs = ['-Xlint:-options'] // Ignore warning about bootclasspath and source compatibility for now
    }

    tasks.withType(Jar) {
        manifest {
            attributes('Source-Revision': gitHash)
        }
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors() / 2
        jvmArgs '-Xmx512m', '-XX:MaxPermSize=256m', '-XX:+HeapDumpOnOutOfMemoryError'
    }

    install {
        repositories {
            mavenInstaller {
                pom.whenConfigured { generatedPom -> customizePom(generatedPom, project) }
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                pom.whenConfigured { generatedPom ->
                    customizePom(generatedPom, project)
                }
                repository(url: 'https://oss.sonatype.org/content/repositories/releases/') {
                    if (project.hasProperty('sonatypeStagingUsername')) {
                        authentication(userName: sonatypeStagingUsername, password: sonatypeStagingPassword)
                    }
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    if (project.hasProperty('sonatypeStagingUsername')) {
                        authentication(userName: sonatypeStagingUsername, password: sonatypeStagingPassword)
                    }
                }
            }
        }
    }

    if (file("src/itest").exists()) {
        sourceSets {
            itest {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
            }
        }

        configurations {
            itestCompile.extendsFrom testCompile
            itestRuntime.extendsFrom testRuntime
        }

        task itest(type: Test) {
            classpath = sourceSets.itest.runtimeClasspath
            testClassesDir = sourceSets.itest.output.classesDir
            testResultsDir = file("${project.testResultsDir}/$name")
        }

        idea {
            module {
                testSourceDirs += sourceSets.itest.java.srcDirs
                testSourceDirs += sourceSets.itest.resources.srcDirs
                scopes.TEST.plus.add(configurations.itestCompile)
                scopes.TEST.plus.add(configurations.itestRuntime)
            }
        }

        eclipse {
            classpath {
                plusConfigurations.add(configurations.itestCompile)
                plusConfigurations.add(configurations.itestRuntime)
            }
        }
    }

    if (System.getProperty("strict") != null) {
        apply plugin: 'checkstyle'
        apply plugin: 'findbugs'

        checkstyle {
            configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
        }

        tasks.withType(FindBugs) {
            excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
        }
    }

    // Support for 'provided' dependencies in generated poms
    ext.providedDependencies = []
    ext.provided = { providedDependencies << it }
}

/**
 * Customize the auto-generated pom with additional items necessary for maven central publication.
 */
def customizePom(pom, gradleProject) {
    pom.project {
        name = gradleProject.name
        description = gradleProject.description
        url = "https://github.com/davidbuccola/${rootProject.name}"
        organization {
            name = 'David Buccola'
            url = 'https://github.com/davidbuccola'
        }
        developers {
            developer {
                id = 'davidbuccola'
                name = 'David Buccola'
                email = 'david.buccola@gmail.com'
            }
        }
        scm {
            url = "https://github.com/davidbuccola/${rootProject.name}"
            connection = "scm:git:git://github.com/davidbuccola/${rootProject.name}"
            developerConnection = "scm:git:git://github.com/davidbuccola/${rootProject.name}"
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        // Respect 'provided' dependencies
        gradleProject.providedDependencies.each { dep ->
            pom.dependencies.find { it.artifactId == dep.name }?.scope = 'provided'
        }
    }
}

/**
 * Generates a new gradle wrapper. You'll want to do this if you change gradle version or if your jvm options change
 * below.
 */
task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = project.hasProperty('gradleVersion') ? project.gradleVersion : '1.3'
}
